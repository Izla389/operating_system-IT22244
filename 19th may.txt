
//if else

if(condition) 
{
	//body of if statements
}
else {
    //body of else statements
}


Enter your age verify your eligible or not for election voting 
using if-else condition

[2021ict30@fedora ~]$ touch ifelse.c
[2021ict30@fedora ~]$ vi ifelse.c

//code
#include<stdio.h>
int main()
{
	int age;
	
	printf("Enter you age: ");
	scanf("%d", &age);
	
	if(age < 0)
	{
		printf("Invalid input");
	}
	else if (age < 18 )
	{
		printf("You are not eligible for election voting");
	}
	else {
		printf("You are eligible for election voting");
	}	
	
	return 0;

}


[2021ict30@fedora ~]$ gcc ifelse.c -o ifelse

[2021ict30@fedora ~]$ ./ifelse
Enter you age: 25
You are eligible for election voting

[2021ict30@fedora ~]$ ./ifelse
Enter you age: 14
You are not eligible for election voting

----------------------------------------------------------------------------------------------------

ternary operator
//syntax
//test_condition ? expression1 : expression2;


//code
#include<stdio.h>
int main()
{
	int age;
	
	printf("Enter you age: ");
	scanf("%d", &age);
	
	age>18 ? printf("You are eligible for election voting") : printf("You are not eligible for election voting\n");
	
	return 0;

}

[2021ict30@fedora ~]$ gcc ifelse.c -o ifelse

[2021ict30@fedora ~]$ ./ifelse
Enter you age: 15
You are not eligible for election voting

[2021ict30@fedora ~]$ ./ifelse
Enter you age: 56
You are eligible for election voting

----------------------------------------------------------------------------------------------------

//switch opetaor

switch (variable/expression)
{
	case 1:
		//body of case 1
		break;
	case 2:
		//body of case 2
		break;
	case n:
		//body of case n
		break;
		
	default:
		//body of default
	
}

Enter the value between 1 to 7 and create a program for following output

Enter the number between 1 to 7 :1
Today is sunday

[2021ict30@fedora ~]$ touch switch.c
[2021ict30@fedora ~]$ vi switch.c

//code
#include<stdio.h>
int main() 
{
	int value;
	
	 printf("Enter the number between 1 to 7 : ");
	scanf("%d", &value);
	
	switch (value)
	{
		case 1:
		printf("Today is sunday");
		break;
		
		case 2:
		printf("Today is Monday");
		break;
		
		case 3:
		printf("Today is Tuesday");
		break;
		
		case 4:
		printf("Today is Wednesday");
		break;
		
		case 5:
		printf("Today is Thursday");
		break;
		
		case 6:
		printf("Today is Friday");
		break;
		
		case 7:
		printf("Today is Saturday");
		break;
		
		default:
		printf("Invalid Number");

	}
}

[2021ict30@fedora ~]$ gcc switch.c -o switch

[2021ict30@fedora ~]$ ./switch
Enter the number between 1 to 7 : 5
Today is Thursday

[2021ict30@fedora ~]$ ./switch
Enter the number between 1 to 7 : -5
Invalid Number

[2021ict30@fedora ~]$ ./switch
Enter the number between 1 to 7 : 45
Invalid Number

----------------------------------------------------------------------------------------------------

write a code for samll astrology based of your path number for that get date of from user
then calculate life path number. (use switch case)
Example:
	Date: 23
	
	calculate for life path number:
		a=date%10	3
		b=date/10	2
		c=a+ba		5
		
	inlife path number :
		1. Lucky
		2. carefully do your work
		3. stronger
		4. happy
		5. can get help
		6. doubt
		7. sad
		8. like
		9. courage
		
		
[2021ict30@fedora ~]$ touch astro.c
[2021ict30@fedora ~]$ vi astro.c


//code

#include <stdio.h>

int main() {
    int date, a, b, lifePath;

    printf("Enter your birth date (DD): ");
    scanf("%d", &date);

    a = date % 10;  // Extract last digit
    b = date / 10;  // Extract first digit
    lifePath = a + b;  // Calculate life path number

    // Ensure life path number is between 1-9
    if (lifePath > 9) {
        lifePath = (lifePath % 10) + (lifePath / 10);
    }

    printf("Your Life Path Number is: %d\n", lifePath);
    printf("Meaning: ");

    switch(lifePath) {
        case 1: printf("Lucky\n"); break;
        case 2: printf("Carefully do your work\n"); break;
        case 3: printf("Stronger\n"); break;
        case 4: printf("Happy\n"); break;
        case 5: printf("Can get help\n"); break;
        case 6: printf("Doubt\n"); break;
        case 7: printf("Sad\n"); break;
        case 8: printf("Like\n"); break;
        case 9: printf("Courage\n"); break;
        default: printf("Invalid life path number\n");
    }

    return 0;
}

[2021ict30@fedora ~]$ gcc astro.c -o astro

[2021ict30@fedora ~]$ ./astro
Enter your birth date (DD): 12
Your Life Path Number is: 3
Meaning: Stronger

[2021ict30@fedora ~]$ ./astro
Enter your birth date (DD): 5
Your Life Path Number is: 5
Meaning: Can get help

----------------------------------------------------------------------------------------------------

Give list of numbers then calculate the summation and ,ultiplication using for loop
Example: 
	1 2 3 4 5 
	summation = 15
	Multiplication = 120
	
[2021ict30@fedora ~]$ touch example3.c
[2021ict30@fedora ~]$ vi example3.c

	
//code

#include <stdio.h>

int main() {
    // Define the list of numbers
    int numbers[] = {1, 2, 3, 4, 5};
    int sum = 0;
    int product = 1;
    int size = sizeof(numbers) / sizeof(numbers[0]);

    // Iterate over the array using a for loop
    for (int i = 0; i < size; i++) {
        sum += numbers[i];  // Add each number to sum
        product *= numbers[i];  // Multiply each number to product
    }

    // Print the results
    printf("Summation = %d\n", sum);
    printf("Multiplication = %d\n", product);

    return 0;
}

[2021ict30@fedora ~]$ gcc example3.c -o example3

[2021ict30@fedora ~]$ ./example3
Summation = 15
Multiplication = 120

	
----------------------------------------------------------------------------------------------------

print the integers from 1 to 10 using while loop

[2021ict30@fedora ~]$ touch example4.c
[2021ict30@fedora ~]$ vi example4.c


//code

#include <stdio.h>

int main() {
    int i = 1; // Initialize the counter variable

    // While loop to print numbers from 1 to 10
    while (i <= 10) {
        printf("%d\n", i); // Print the current value of i
        i++; // Increment i by 1
    }

    return 0;
}

[2021ict30@fedora ~]$ gcc example4.c -o example4
[2021ict30@fedora ~]$ ./example4
1
2
3
4
5
6
7
8
9
10


----------------------------------------------------------------------------------------------------

write a c program to generate and print the fibonacci series up to specified 
number of terms. The program should take the number of term as input from the user and then
display the corresponding fibonacci sequence.

[2021ict30@fedora ~]$ touch example5.c
[2021ict30@fedora ~]$ vi example5.c

//code

#include <stdio.h>

int main() {
    int n, first = 0, second = 1, next;

    // Get user input
    printf("Enter the number of terms: ");
    scanf("%d", &n);

    printf("Fibonacci Series: ");

    for (int i = 1; i <= n; i++) {
        // Print the first two terms
        if (i == 1) {
            printf("%d ", first);
            continue;
        }
        if (i == 2) {
            printf("%d ", second);
            continue;
        }
        // Generate next term
        next = first + second;
        first = second;
        second = next;

        printf("%d ", next);
    }

    printf("\n"); // New line for better formatting
    return 0;
}


[2021ict30@fedora ~]$ gcc example5.c -o example5

[2021ict30@fedora ~]$ ./example5
Enter the number of terms: 6
Fibonacci Series: 0 1 1 2 3 5


----------------------------------------------------------------------------------------------------

write a c program to calculate the factorial of a given non-negative integer.


[2021ict30@fedora ~]$ touch example6.c
[2021ict30@fedora ~]$ vi example6.c


//code
#include <stdio.h>

int main() {
    int n;
    unsigned long long factorial = 1; // Factorial result

    // Get user input
    printf("Enter a non-negative integer: ");
    scanf("%d", &n);

    // Check if the input is non-negative
    if (n < 0) {
        printf("Factorial is not defined for negative numbers.\n");
    } else {
        // Calculate factorial
        for (int i = 1; i <= n; i++) {
            factorial *= i;
        }
        // Print the result
        printf("Factorial of %d = %llu\n", n, factorial);
    }

    return 0;
}

[2021ict30@fedora ~]$ gcc example6.c -o example6

[2021ict30@fedora ~]$ ./example6
Enter a non-negative integer: 5
Factorial of 5 = 120

[2021ict30@fedora ~]$ ./example6
Enter a non-negative integer: 9
Factorial of 9 = 362880


----------------------------------------------------------------------------------------------------

write a c programe that:
Accept two strings as input from the user.
concates the two strings Dispaly the concanated result.

[2021ict30@fedora ~]$ touch example7.c
[2021ict30@fedora ~]$ vi example7.c


//code

#include <stdio.h>
#include <string.h>

int main() {
    char str1[100], str2[100], result[200];

    // Get user input for both strings
    printf("Enter the first string: ");
    fgets(str1, sizeof(str1), stdin);

    printf("Enter the second string: ");
    fgets(str2, sizeof(str2), stdin);

    // Remove newline characters if present
    str1[strcspn(str1, "\n")] = '\0';
    str2[strcspn(str2, "\n")] = '\0';

    // Concatenate the strings
    strcpy(result, str1);
    strcat(result, str2);

    // Display the concatenated result
    printf("Concatenated String: %s\n", result);

    return 0;
}

[2021ict30@fedora ~]$ gcc example7.c -o example7

[2021ict30@fedora ~]$ ./example7
Enter the first string: apple
Enter the second string: banana
Concatenated String: applebanana


----------------------------------------------------------------------------------------------------

write c program that takes a birthday number (as an integer) as input and 
converts it to its decimal equivalent.

[2021ict30@fedora ~]$ touch example8.c
[2021ict30@fedora ~]$ vi example8.c


//code
#include <stdio.h>

int main() {
    int birthday_number;

    // Get user input
    printf("Enter your birthday number (integer): ");
    scanf("%d", &birthday_number);

    // Display results in different formats
    printf("Decimal: %d\n", birthday_number);
    printf("Binary: ");
    
    // Convert to binary manually
    int binary[32], i = 0;
    int num = birthday_number;
    while (num > 0) {
        binary[i] = num % 2;
        num /= 2;
        i++;
    }

    // Print binary number in correct order
    for (int j = i - 1; j >= 0; j--) {
        printf("%d", binary[j]);
    }
    printf("\n");

    // Convert to octal and hexadecimal
    printf("Octal: %o\n", birthday_number);
    printf("Hexadecimal: %X\n", birthday_number);

    return 0;
}


[2021ict30@fedora ~]$ gcc example8.c -o example8

[2021ict30@fedora ~]$ ./example8
Enter your birthday number (integer): 12
Decimal: 12
Binary: 1100
Octal: 14
Hexadecimal: C


----------------------------------------------------------------------------------------------------

write a c program that:
Accepts an array of ineger from the user.
Finda and sisplay the maximum and minimum values in the array.


[2021ict30@fedora ~]$ touch example9.c
[2021ict30@fedora ~]$ vi example9.c


//code

#include <stdio.h>

int main() {
    int n, i, max, min;

    // Get user input for array size
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    int arr[n];

    // Get user input for array elements
    printf("Enter %d integers: ", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Initialize max and min with the first element
    max = min = arr[0];

    // Find the maximum and minimum values
    for (i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
        if (arr[i] < min) {
            min = arr[i];
        }
    }

    // Display the results
    printf("Maximum value: %d\n", max);
    printf("Minimum value: %d\n", min);

    return 0;
}

[2021ict30@fedora ~]$ gcc example9.c -o example9

[2021ict30@fedora ~]$ ./example9
Enter the number of elements:  1 5 2
Enter 1 integers: Maximum value: 5
Minimum value: 5


----------------------------------------------------------------------------------------------------

c program to generate pascal's Triangle

output:
no of rows = 5

		1
	  1	  1
	1	2	1
  1	  3	  3	  1
1	4	6	4	1


[2021ict30@fedora ~]$ touch example10.c
[2021ict30@fedora ~]$ vi example10.c

//code
#include <stdio.h>

int factorial(int n) {
    int fact = 1;
    for (int i = 1; i <= n; i++) {
        fact *= i;
    }
    return fact;
}

int combination(int n, int r) {
    return factorial(n) / (factorial(r) * factorial(n - r));
}

int main() {
    int rows;

    // Get user input for the number of rows
    printf("Enter the number of rows: ");
    scanf("%d", &rows);

    // Generate Pascal's Triangle
    for (int i = 0; i < rows; i++) {
        // Print spaces for formatting
        for (int j = 0; j < rows - i; j++) {
            printf("  ");
        }
        // Print values for the row
        for (int j = 0; j <= i; j++) {
            printf("%4d", combination(i, j));
        }
        printf("\n");
    }

    return 0;
}

[2021ict30@fedora ~]$  gcc example10.c -o example10

[2021ict30@fedora ~]$ ./example10
Enter the number of rows: 4
           1
           1
         1   1
       1   2   1
     1   3   3   1



